/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    products: Product;
    'product-categories': ProductCategory;
    sizes: Size;
    materials: Material;
    'frame-colors': FrameColor;
    'hang-options': HangOption;
    blogs: Blog;
    'blog-categories': BlogCategory;
    media: Media;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    'product-categories': ProductCategoriesSelect<false> | ProductCategoriesSelect<true>;
    sizes: SizesSelect<false> | SizesSelect<true>;
    materials: MaterialsSelect<false> | MaterialsSelect<true>;
    'frame-colors': FrameColorsSelect<false> | FrameColorsSelect<true>;
    'hang-options': HangOptionsSelect<false> | HangOptionsSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'blog-categories': BlogCategoriesSelect<false> | BlogCategoriesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  role: 'admin' | 'user' | 'editor';
  avatar?: (number | null) | Media;
  bio?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility
   */
  alt: string;
  /**
   * Image caption
   */
  caption?: string | null;
  /**
   * Tags for organizing media
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    desktop?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  /**
   * Product name (e.g., "Classic Black Frame")
   */
  name: string;
  /**
   * URL-friendly version of the name
   */
  slug: string;
  /**
   * Detailed product description
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Brief description for product cards
   */
  shortDescription?: string | null;
  /**
   * Product categories
   */
  categories: (number | ProductCategory)[];
  status: 'draft' | 'published' | 'archived';
  /**
   * Feature this product on homepage
   */
  featured?: boolean | null;
  images: {
    image: number | Media;
    alt: string;
    caption?: string | null;
    id?: string | null;
  }[];
  /**
   * Base price in INR (before size/color/material modifiers)
   */
  basePrice: number;
  /**
   * Original price for discount display
   */
  compareAtPrice?: number | null;
  /**
   * Available frame sizes (default 6 will be shown)
   */
  availableSizes: (number | Size)[];
  /**
   * Default colors to show (first 3)
   */
  defaultColors: (number | FrameColor)[];
  /**
   * Additional colors user can select
   */
  additionalColors?: (number | FrameColor)[] | null;
  /**
   * Default materials to show (first 3)
   */
  defaultMaterials: (number | Material)[];
  /**
   * Additional materials user can select
   */
  additionalMaterials?: (number | Material)[] | null;
  /**
   * Price modifiers for specific combinations
   */
  variantPricing?:
    | {
        size: number | Size;
        color: number | FrameColor;
        material: number | Material;
        /**
         * Price adjustment (+ or -) for this combination
         */
        priceModifier?: number | null;
        /**
         * Stock for this specific variant
         */
        stock?: number | null;
        isAvailable?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Key product features
   */
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  specifications?: {
    weight?: string | null;
    dimensions?: string | null;
    mounting?: ('stickable_tape' | 'standard_hook' | 'both') | null;
  };
  /**
   * General stock quantity (individual variant stock in Variants tab)
   */
  stock?: number | null;
  /**
   * Stock Keeping Unit
   */
  sku?: string | null;
  /**
   * Track inventory for this product
   */
  trackInventory?: boolean | null;
  seo?: {
    title?: string | null;
    description?: string | null;
    keywords?: string | null;
  };
  /**
   * Computed from base price (read-only)
   */
  price?: number | null;
  pageLayout?:
    | (
        | {
            title: string;
            /**
             * Optional subtitle for the FAQ section
             */
            subtitle?: string | null;
            faqs: {
              question: string;
              answer: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              category?: ('general' | 'shipping' | 'returns' | 'care' | 'installation') | null;
              sortOrder?: number | null;
              id?: string | null;
            }[];
            style?: ('accordion' | 'tabs' | 'cards') | null;
            /**
             * Group FAQs by category
             */
            showCategories?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'faq';
          }
        | {
            items: {
              image?: (number | null) | Media;
              title: string;
              description: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'featureBlock';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-categories".
 */
export interface ProductCategory {
  id: number;
  /**
   * Category name (e.g., "Classic Frames", "Modern Frames")
   */
  name: string;
  /**
   * URL-friendly version of the name
   */
  slug: string;
  /**
   * Category description
   */
  description?: string | null;
  /**
   * Category featured image
   */
  image: number | Media;
  /**
   * Category icon (optional)
   */
  icon?: (number | null) | Media;
  /**
   * Parent category for hierarchical structure
   */
  parentCategory?: (number | null) | ProductCategory;
  seo?: {
    title?: string | null;
    description?: string | null;
    keywords?: string | null;
  };
  status: 'active' | 'inactive';
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sizes".
 */
export interface Size {
  id: number;
  /**
   * Display name for the size (e.g., 8" × 8")
   */
  name: string;
  /**
   * Description of the format (e.g., Square format, Portrait format)
   */
  dimensions: string;
  /**
   * Aspect ratio of the size (width/height)
   */
  aspectRatio: number;
  /**
   * Price in rupees for this size
   */
  price: number;
  /**
   * Whether this size is available for selection
   */
  available?: boolean | null;
  /**
   * Order in which sizes should appear in the UI
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frame-colors".
 */
export interface FrameColor {
  id: number;
  /**
   * Name of the frame color (e.g., Black, White, Brown)
   */
  name: string;
  /**
   * CSS class for the color (e.g., bg-gray-900, bg-white)
   */
  color: string;
  /**
   * Description of the frame color
   */
  description: string;
  /**
   * Whether this frame color is available for selection
   */
  available?: boolean | null;
  /**
   * Order in which frame colors should appear in the UI
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "materials".
 */
export interface Material {
  id: number;
  /**
   * Image URL from Imagekit
   */
  image: string;
  /**
   * Name of the material (e.g., Classic Frame, Frameless)
   */
  name: string;
  /**
   * Short description of the material
   */
  description: string;
  /**
   * Detailed content/description for tooltips
   */
  content?: string | null;
  /**
   * External link for more information
   */
  link?: string | null;
  /**
   * Whether this material is available for selection
   */
  available?: boolean | null;
  /**
   * Order in which materials should appear in the UI
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hang-options".
 */
export interface HangOption {
  id: number;
  /**
   * Image URL from Imagekit
   */
  image: string;
  /**
   * Name of the hang option (e.g., Stickable Tape, Standard Hook)
   */
  name: string;
  /**
   * Price display text (e.g., ₹0)
   */
  description: string;
  /**
   * Detailed content/description for tooltips
   */
  content?: string | null;
  /**
   * Price in rupees for this hang option
   */
  price?: number | null;
  /**
   * Whether this hang option is available for selection
   */
  available?: boolean | null;
  /**
   * Order in which hang options should appear in the UI
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title: string;
  slug: string;
  /**
   * Brief summary for blog cards
   */
  excerpt: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  featuredImage: number | Media;
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  categories: (number | BlogCategory)[];
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  author: string;
  publishedDate: string;
  /**
   * Estimated read time in minutes
   */
  readTime?: number | null;
  seo?: {
    title?: string | null;
    description?: string | null;
    keywords?: string | null;
  };
  status: 'draft' | 'published' | 'archived';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories".
 */
export interface BlogCategory {
  id: number;
  /**
   * Category name (e.g., "Frame Care", "Design Tips")
   */
  name: string;
  slug: string;
  description?: string | null;
  /**
   * Hex color code for category badge
   */
  color?: string | null;
  status: 'active' | 'inactive';
  /**
   * Display order (lower numbers appear first)
   */
  sortOrder?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  slug: string;
  pageType: 'plp' | 'pdp' | 'custom';
  content?:
    | (
        | {
            title: string;
            /**
             * Optional subtitle for the FAQ section
             */
            subtitle?: string | null;
            faqs: {
              question: string;
              answer: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              category?: ('general' | 'shipping' | 'returns' | 'care' | 'installation') | null;
              sortOrder?: number | null;
              id?: string | null;
            }[];
            style?: ('accordion' | 'tabs' | 'cards') | null;
            /**
             * Group FAQs by category
             */
            showCategories?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'faq';
          }
        | {
            items: {
              image?: (number | null) | Media;
              title: string;
              description: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'featureBlock';
          }
        | {
            title: string;
            /**
             * Optional subtitle
             */
            subtitle?: string | null;
            layout: 'image-text' | 'carousel' | 'grid' | 'tabs';
            specifications: {
              title: string;
              description: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              images?:
                | {
                    image: number | Media;
                    caption?: string | null;
                    id?: string | null;
                  }[]
                | null;
              features?:
                | {
                    feature: string;
                    value: string;
                    icon?: (number | null) | Media;
                    id?: string | null;
                  }[]
                | null;
              sortOrder?: number | null;
              id?: string | null;
            }[];
            /**
             * Show comparison table
             */
            showComparison?: boolean | null;
            comparisonTable?:
              | {
                  feature: string;
                  /**
                   * Value for Classic frames
                   */
                  classic?: string | null;
                  /**
                   * Value for Frameless frames
                   */
                  frameless?: string | null;
                  /**
                   * Value for Canvas frames
                   */
                  canvas?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'frame-specifications';
          }
        | {
            type: 'hero' | 'promo' | 'info' | 'cta';
            title: string;
            subtitle?: string | null;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            backgroundImage?: (number | null) | Media;
            /**
             * Hex color code (e.g., #ffffff)
             */
            backgroundColor?: string | null;
            /**
             * Hex color code for text
             */
            textColor?: string | null;
            buttons?:
              | {
                  text: string;
                  url: string;
                  style?: ('primary' | 'secondary' | 'outline') | null;
                  openInNewTab?: boolean | null;
                  id?: string | null;
                }[]
              | null;
            alignment?: ('left' | 'center' | 'right') | null;
            height?: ('small' | 'medium' | 'large' | 'full') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'banner';
          }
        | {
            /**
             * Optional slider title
             */
            title?: string | null;
            slides: {
              image: number | Media;
              title?: string | null;
              description?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              link?: {
                url?: string | null;
                text?: string | null;
                openInNewTab?: boolean | null;
              };
              overlay?: {
                enabled?: boolean | null;
                color?: string | null;
                position?: ('center' | 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right') | null;
              };
              id?: string | null;
            }[];
            settings?: {
              autoplay?: boolean | null;
              /**
               * Delay in milliseconds
               */
              autoplayDelay?: number | null;
              showNavigation?: boolean | null;
              showPagination?: boolean | null;
              loop?: boolean | null;
              effect?: ('slide' | 'fade' | 'cube' | 'coverflow') | null;
            };
            height?: ('small' | 'medium' | 'large' | 'auto') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'slider';
          }
        | {
            /**
             * Internal title for identification
             */
            title?: string | null;
            /**
             * Custom HTML content
             */
            html: string;
            /**
             * Optional custom CSS styles
             */
            css?: string | null;
            /**
             * Optional custom JavaScript
             */
            javascript?: string | null;
            /**
             * CSS class for the wrapper div
             */
            wrapperClass?: string | null;
            /**
             * Remove container padding for full-width content
             */
            isFullWidth?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'custom-html';
          }
      )[]
    | null;
  seo?: {
    title?: string | null;
    description?: string | null;
    keywords?: string | null;
    ogImage?: (number | null) | Media;
  };
  status: 'draft' | 'published' | 'archived';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'products';
        value: number | Product;
      } | null)
    | ({
        relationTo: 'product-categories';
        value: number | ProductCategory;
      } | null)
    | ({
        relationTo: 'sizes';
        value: number | Size;
      } | null)
    | ({
        relationTo: 'materials';
        value: number | Material;
      } | null)
    | ({
        relationTo: 'frame-colors';
        value: number | FrameColor;
      } | null)
    | ({
        relationTo: 'hang-options';
        value: number | HangOption;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'blog-categories';
        value: number | BlogCategory;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  avatar?: T;
  bio?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  shortDescription?: T;
  categories?: T;
  status?: T;
  featured?: T;
  images?:
    | T
    | {
        image?: T;
        alt?: T;
        caption?: T;
        id?: T;
      };
  basePrice?: T;
  compareAtPrice?: T;
  availableSizes?: T;
  defaultColors?: T;
  additionalColors?: T;
  defaultMaterials?: T;
  additionalMaterials?: T;
  variantPricing?:
    | T
    | {
        size?: T;
        color?: T;
        material?: T;
        priceModifier?: T;
        stock?: T;
        isAvailable?: T;
        id?: T;
      };
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  specifications?:
    | T
    | {
        weight?: T;
        dimensions?: T;
        mounting?: T;
      };
  stock?: T;
  sku?: T;
  trackInventory?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  price?: T;
  pageLayout?:
    | T
    | {
        faq?:
          | T
          | {
              title?: T;
              subtitle?: T;
              faqs?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    category?: T;
                    sortOrder?: T;
                    id?: T;
                  };
              style?: T;
              showCategories?: T;
              id?: T;
              blockName?: T;
            };
        featureBlock?:
          | T
          | {
              items?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-categories_select".
 */
export interface ProductCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  image?: T;
  icon?: T;
  parentCategory?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  status?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sizes_select".
 */
export interface SizesSelect<T extends boolean = true> {
  name?: T;
  dimensions?: T;
  aspectRatio?: T;
  price?: T;
  available?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "materials_select".
 */
export interface MaterialsSelect<T extends boolean = true> {
  image?: T;
  name?: T;
  description?: T;
  content?: T;
  link?: T;
  available?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "frame-colors_select".
 */
export interface FrameColorsSelect<T extends boolean = true> {
  name?: T;
  color?: T;
  description?: T;
  available?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hang-options_select".
 */
export interface HangOptionsSelect<T extends boolean = true> {
  image?: T;
  name?: T;
  description?: T;
  content?: T;
  price?: T;
  available?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  excerpt?: T;
  content?: T;
  featuredImage?: T;
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  categories?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  author?: T;
  publishedDate?: T;
  readTime?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories_select".
 */
export interface BlogCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  status?: T;
  sortOrder?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        desktop?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  pageType?: T;
  content?:
    | T
    | {
        faq?:
          | T
          | {
              title?: T;
              subtitle?: T;
              faqs?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    category?: T;
                    sortOrder?: T;
                    id?: T;
                  };
              style?: T;
              showCategories?: T;
              id?: T;
              blockName?: T;
            };
        featureBlock?:
          | T
          | {
              items?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'frame-specifications'?:
          | T
          | {
              title?: T;
              subtitle?: T;
              layout?: T;
              specifications?:
                | T
                | {
                    title?: T;
                    description?: T;
                    images?:
                      | T
                      | {
                          image?: T;
                          caption?: T;
                          id?: T;
                        };
                    features?:
                      | T
                      | {
                          feature?: T;
                          value?: T;
                          icon?: T;
                          id?: T;
                        };
                    sortOrder?: T;
                    id?: T;
                  };
              showComparison?: T;
              comparisonTable?:
                | T
                | {
                    feature?: T;
                    classic?: T;
                    frameless?: T;
                    canvas?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        banner?:
          | T
          | {
              type?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              backgroundImage?: T;
              backgroundColor?: T;
              textColor?: T;
              buttons?:
                | T
                | {
                    text?: T;
                    url?: T;
                    style?: T;
                    openInNewTab?: T;
                    id?: T;
                  };
              alignment?: T;
              height?: T;
              id?: T;
              blockName?: T;
            };
        slider?:
          | T
          | {
              title?: T;
              slides?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    link?:
                      | T
                      | {
                          url?: T;
                          text?: T;
                          openInNewTab?: T;
                        };
                    overlay?:
                      | T
                      | {
                          enabled?: T;
                          color?: T;
                          position?: T;
                        };
                    id?: T;
                  };
              settings?:
                | T
                | {
                    autoplay?: T;
                    autoplayDelay?: T;
                    showNavigation?: T;
                    showPagination?: T;
                    loop?: T;
                    effect?: T;
                  };
              height?: T;
              id?: T;
              blockName?: T;
            };
        'custom-html'?:
          | T
          | {
              title?: T;
              html?: T;
              css?: T;
              javascript?: T;
              wrapperClass?: T;
              isFullWidth?: T;
              id?: T;
              blockName?: T;
            };
      };
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
        ogImage?: T;
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}